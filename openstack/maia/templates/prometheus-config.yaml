{{- if .Values.prometheus.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-maia

data:
  ca.cert: |
{{ .Values.prometheus.ca | indent 4}}
  prometheus.yaml: |
    global:
      scrape_timeout: 55s

    scrape_configs:
    # Scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # via the following annotations:
    #
    # * `prometheus.io/scrape`: Only scrape services that have a value of `true`
    # * `prometheus.io/scheme`: If the metrics endpoint is secured then you will need
    # to set this to `https` & most likely set the `tls_config` of the scrape config.
    # * `prometheus.io/path`: If the metrics path is not `/metrics` override this.
    # * `prometheus.io/port`: If the metrics are exposed on a different port to the
    # service then set this appropriately.

    - job_name: 'maia/pods'
      tls_config:
        ca_file: /etc/prometheus/ca.cert
      bearer_token: {{ .Values.prometheus.token | quote }}

      kubernetes_sd_configs:
      - api_server: "https://apiserver.{{.Values.global.region}}.{{.Values.global.domain}}"
        tls_config:
          ca_file: /etc/prometheus/ca.cert
        bearer_token: {{ .Values.prometheus.token | quote }}
        role: pod
        namespaces:
          names:
            - maia
      relabel_configs:
      - action: keep
        source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        regex: true
      - action: keep
        source_labels: [__meta_kubernetes_pod_container_port_number, __meta_kubernetes_pod_container_port_name, __meta_kubernetes_pod_annotation_prometheus_io_port]
        regex: (9102;.*;.*)|(.*;metrics;.*)|(__meta_kubernetes_pod_annotation_prometheus_io_port;.*;.+)
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        target_label: __address__
        regex: ([^:]+)(?::\d+);(\d+)
        replacement: ${1}:${2}
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_pod_name]
        target_label: kubernetes_pod_name

    - job_name: 'maia/endpoints'
      tls_config:
        ca_file: /etc/prometheus/ca.cert
      bearer_token: {{ .Values.prometheus.token | quote }}

      kubernetes_sd_configs:
      - api_server: "https://apiserver.{{.Values.global.region}}.{{.Values.global.domain}}"
        tls_config:
          ca_file: /etc/prometheus/ca.cert
        bearer_token: {{ .Values.prometheus.token | quote }}
        role: endpoints
        namespaces:
          names:
            - maia
      relabel_configs:
      - action: keep
        source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        regex: true
      - action: keep
        source_labels: [__meta_kubernetes_pod_container_port_number, __meta_kubernetes_pod_container_port_name, __meta_kubernetes_service_annotation_prometheus_io_port]
        regex: (9102;.*;.*)|(.*;metrics;.*)|(.*;.*;\d+)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        target_label: __address__
        regex: ([^:]+)(?::\d+);(\d+)
        replacement: $1:$2
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_name

    - job_name: 'maia/services'
      tls_config:
        ca_file: /etc/prometheus/ca.cert
      bearer_token: {{ .Values.prometheus.token | quote }}

      kubernetes_sd_configs:
      - api_server: "https://apiserver.{{.Values.global.region}}.{{.Values.global.domain}}"
        tls_config:
          ca_file: /etc/prometheus/ca.cert
        bearer_token: {{ .Values.prometheus.token | quote }}
        role: service
        namespaces:
          names:
            - maia
      relabel_configs:
      - action: keep
        source_labels: [__meta_kubernetes_namespace]
        regex: maia
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        target_label: kubernetes_pod_name

    {{ if .Values.prometheus.openstack_sd }}
    - job_name: nova-instances
      openstack_sd_configs:
      - identity_endpoint: {{ .Values.prometheus.openstack_sd.identity_endpoint | quote }}
        region: {{ .Values.global.region | quote }}
        userid: {{ .Values.prometheus.openstack_sd.userid | quote }}
        password : {{ .Values.prometheus.openstack_sd.password | quote }}
        domain_name: {{ .Values.prometheus.openstack_sd.domain_name | quote }}
    {{ end }}

    # loop over all snmp exporters and exchange exporter and snmp device name, so that
    # the metric is labeled by snmp device name and not by exporter name
    {{- range $config := .Values.snmp_exporter.maia_snmp_config }}
    - job_name: 'snmp-{{ $config.name }}'
      static_configs:
        - targets:
          - {{ $config.target }} # SNMP device
      metrics_path: /snmp
      params:
        module: [{{ $config.name }}]
      relabel_configs:
        - source_labels: [__address__]
          target_label: __param_target
        - source_labels: [__param_target]
          target_label: instance
        - target_label: __address__
          replacement: snmp-exporter-{{ $config.name }}:9116 # SNMP exporter

    {{- end }}

    # self-scrape the embedded prometheus (even when K8S API is down)
    - job_name: 'prometheus-maia'
      static_configs:
        - targets: ['localhost:{{ .Values.prometheus.listen_port }}']
{{- end }}
