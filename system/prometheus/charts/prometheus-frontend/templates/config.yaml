apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-frontend

data:
  alert.rules: |
    # Alert for any node that is unreachable for >1 hour.
    ALERT K8SNodeDown
      IF up{job="kubernetes-nodes"} == 0
      FOR 1h
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubelet cannot be scraped",
        description = "Prometheus could not scrape a {{ "{{$labels.job}}" }} for more than one hour",
      }

    ALERT K8STooManyOpenFiles
      IF 100*process_open_fds{job=~"kubelets|kubernetes"} / process_max_fds > 50
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "{{ $labels.job }} has too many open file descriptors",
        description = "{{ $labels.node }} is using {{ $value }}% of the available file/socket descriptors.",
      }

    ALERT K8STooManyOpenFiles
      IF 100*process_open_fds{job=~"kubelets|kubernetes"} / process_max_fds > 80
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "critical"
      }
      ANNOTATIONS {
        summary = "{{ $labels.job }} has too many open file descriptors",
        description = "{{ $labels.node }} is using {{ $value }}% of the available file/socket descriptors.",
      }

    # Some verbs excluded because they are expected to be long-lasting:
    # WATCHLIST is long-poll, CONNECT is `kubectl exec`.
    ALERT K8SApiServerLatency
      IF histogram_quantile(
          0.99,
          sum without (instance,node,resource) (apiserver_request_latencies_bucket{verb!~"CONNECT|WATCHLIST|WATCH"})
        ) / 1e6 > 1.0
      FOR 10m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubernetes apiserver latency is high",
        description = "99th percentile Latency for {{ $labels.verb }} requests to the kube-apiserver is higher than 1s.",
      }

    ALERT K8SApiServerEtcdAccessLatency
      IF etcd_request_latencies_summary{quantile="0.99"} / 1e6 > 1.0
      FOR 15m
      LABELS {
        service = "k8s",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Access to etcd is slow",
        description = "99th percentile latency for apiserver to access etcd is higher than 1s.",
      }

    ALERT K8SKubeletTooManyPods
      IF kubelet_running_pod_count > 100
      LABELS {
        service = "k8s",
        severity = "warning",
      }
      ANNOTATIONS {
        summary = "Kubelet is close to pod limit",
        description = "Kubelet {{$labels.instance}} is running {{$value}} pods, close to the limit of 110",
      }

    ALERT KsDatabaseDown
      IF up{component="keystone",type="database"} == 0
      LABELS {
        service = "keystone",
        severity = "warning"
      }
      ANNOTATIONS {
        summary = "Kubelet cannot be scraped",
        description = "Prometheus could not scrape a {{ "{{$labels.job}}" }} for more than one hour",
      }

  prometheus.yml: |
    rule_files:
      - /etc/prometheus/*.rules

    scrape_configs:
    - job_name: 'prometheus-frontend'
      static_configs:
        - targets: ['localhost:9090']

    - job_name: 'prometheus-collector'
      scrape_interval: 15s
      scrape_timeout: 10s

      honor_labels: true
      metrics_path: '/federate'

      params:
        'match[]':
          - '{__name__=~"^aggregated:.+"}'
          - '{__name__=~"^ad_.+"}'
          - '{__name__=~"^apiserver_.+"}'
          - '{__name__=~"^bind_.+"}'
          - '{__name__=~"^blackbox_.+"}'
          - '{__name__=~"^canary_.+"}'          
          - '{__name__=~"^container_fs.+"}'
          - '{__name__=~"^container_memory_.+"}'
          - '{__name__=~"^container_network_.+"}'
          - '{__name__=~"^container_spec_.+"}'
          - '{__name__=~"^container_scrape_error"}'
          - '{__name__=~"^container_start_time_seconds"}'
          - '{__name__=~"^container_task_state"}'
          - '{__name__=~"^datapath_.+"}'
          - '{__name__=~"^elasticsearch_.+"}'
          - '{__name__=~"^etcd_.+"}'
          - '{__name__=~"^go_.+"}'
          - '{__name__=~"^http_.+"}'
          - '{__name__=~"^inframonitor_.+"}'
          - '{__name__=~"^keystone_.+"}'
          - '{__name__=~"^kube_.+"}'
          - '{__name__=~"^kubelet_.+"}'
          - '{__name__=~"^machine_cpu_cores"}'
          - '{__name__=~"^machine_memory_bytes"}'
          - '{__name__=~"^memcached.+"}'
          - '{__name__=~"^openstack_.+"}'
          - '{__name__=~"^pg_.+"}'
          - '{__name__=~"^process_.+"}'
          - '{__name__=~"^prometheus_.+"}'
          - '{__name__=~"^rabbitmq_.+"}'
          - '{__name__=~"^rest_client_.+"}'
          - '{__name__=~"^scrape_duration_seconds"}'
          - '{__name__=~"^statsd_.+"}'
          - '{__name__=~"^swift_.+"}'
          - '{__name__=~"^unbound_.+"}'
          - '{__name__=~"^up"}'

      metric_relabel_configs:
        - action: replace
          source_labels: [__name__]
          target_label: __name__
          regex: aggregated:(.+)
          replacement: $1

      static_configs:
        - targets:
          - 'prometheus-collector.{{ .Release.Namespace }}:9090'

