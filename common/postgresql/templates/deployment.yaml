apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    component: postgres
  annotations:
    checksum/secrets: {{ include (print $.Chart.Name "/templates/secrets.yaml") . | sha256sum }}
    checksum/etc: {{ include (print $.Chart.Name "/templates/etc-configmap.yaml") . | sha256sum }}
spec:
  replicas: {{ .Values.replicas }}
  revisionHistoryLimit: {{ .Values.upgrades.revisionHistory }}
  strategy:
    type: {{ .Values.upgrades.podReplacementStrategy }}
    {{ if eq .Values.upgrades.podReplacementStrategy "RollingUpdate" }}
    rollingUpdate:
      maxUnavailable: {{ .Values.upgrades.rollingUpdate.maxUnavailable }}
      maxSurge: {{ .Values.upgrades.rollingUpdate.maxSurge }}
    {{ end }}
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      hostPID: false
      containers:
      - name: {{ template "fullname" . }}
        image: "{{ .Values.image }}:{{ .Values.imageTag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.imagePullPolicy | quote }}
        env:
        - name: POSTGRES_USER
          value: {{ default "postgres" .Values.postgresUser | quote }}
          # Required for pg_isready in the health probes.
        - name: PGUSER
          value: {{ default "postgres" .Values.postgresUser | quote }}
        - name: POSTGRES_DB
          value: {{ default "" .Values.postgresDatabase | quote }}
        - name: PGDATA
          value: /postgresql/data
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "fullname" . }}
              key: postgres-password
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - pg_isready
          initialDelaySeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
          initialDelaySeconds: 60
          timeoutSeconds: 3
        {{- if .Values.resources.enabled }}
        resources:
          limits:
            cpu: {{ .Values.resources.limits.cpu | quote }}
            memory: {{ .Values.resources.limits.memory | quote }}
          requests:
            cpu: {{ .Values.resources.requests.cpu | quote }}
            memory: {{ .Values.resources.requests.memory | quote }}
        {{- end }}
        volumeMounts:
        - name: data
          mountPath: /postgresql
        - name: postgres-etc
          mountPath: /postgresql-conf
{{- if .Values.dbInit }}
        - name: db-init
          mountPath: /docker-entrypoint-initdb.d
{{- end }}
{{- if .Values.dbMaintain }}
        - name: db-maintain
          mountPath: /docker-entrypoint-maintaindb.d
{{- end }}

{{- if .Values.backup.enabled }}
      - image: "{{ .Values.backup.image }}:{{.Values.backup.imageTag}}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.backup.imagePullPolicy | quote }}
        name: backup
        env:
          - name: MY_POD_NAME
            value: {{ template "fullname" . }}
          - name: MY_POD_NAMESPACE
            value: {{.Release.Namespace}}
          - name: OS_AUTH_URL
            value: {{.Values.backup.os_auth_url | quote}}
          - name: OS_AUTH_VERSION
            value: {{.Values.backup.os_auth_version | quote}}
          - name: OS_USERNAME
            value: {{.Values.backup.os_username | quote}}
          - name: OS_USER_DOMAIN_NAME
            value: {{.Values.backup.os_user_domain | quote}}
          - name: OS_PROJECT_NAME
            value: {{.Values.backup.os_project_name | quote}}
          - name: OS_PROJECT_DOMAIN_NAME
            value: {{.Values.backup.os_project_domain | quote}}
          - name: OS_REGION_NAME
            value: {{.Values.backup.os_region_name | quote}}
          - name: OS_PASSWORD
            value: {{.Values.backup.os_password | quote}}
          - name: BACKUP_PGSQL_FULL
            value: {{.Values.backup.interval_full | quote}}
{{- end }}
{{- if .Values.metrics.enabled }}
      - name: metrics
        image: "{{ .Values.metrics.image }}:{{ .Values.metrics.imageTag }}"
        imagePullPolicy: {{ default "IfNotPresent" .Values.metrics.imagePullPolicy | quote }}
        env:
        - name: DATA_SOURCE_NAME
          value: postgresql://{{ default "postgres" .Values.postgresUser }}@localhost:5432?sslmode=disable
        ports:
        - name: metrics
          containerPort: {{ default 9187 .Values.metrics.port }}
        {{- if .Values.metrics.customMetrics }}
        args: ["-extend.query-path", "/conf/custom-metrics.yaml"]
        volumeMounts:
          - name: custom-metrics
            mountPath: /conf
            readOnly: true
        {{- end }}
        {{- if .Values.metrics.resources.enabled }}
        resources:
          limits:
            cpu: {{ .Values.metrics.resources.limits.cpu | quote }}
            memory: {{ .Values.metrics.resources.limits.memory | quote }}
          requests:
            cpu: {{ .Values.metrics.resources.requests.cpu | quote }}
            memory: {{ .Values.metrics.resources.requests.memory | quote }}
        {{- end }}
{{- end }}
      volumes:
      - name: postgres-etc
        configMap:
          name: {{ template "fullname" . }}-etc
      - name: data
      {{- if .Values.persistence.enabled }}
        persistentVolumeClaim:
          claimName: {{ if .Values.persistence.existingClaim }}{{ .Values.persistence.existingClaim }}{{- else }}{{ template "fullname" . }}{{- end }}
      {{- else }}
        emptyDir: {}
      {{- end }}
      {{- if and .Values.metrics.enabled .Values.metrics.customMetrics }}
      - name: custom-metrics
        secret:
          secretName: {{ template "fullname" . }}
          items:
            - key: custom-metrics.yaml
              path: custom-metrics.yaml
      {{- end }}
{{- if .Values.dbInit }}
      - name: db-init
        configMap:
          name: {{ .Values.dbInit }}
{{- end }}
{{- if .Values.dbMaintain }}
      - name: db-maintain
        configMap:
          name: {{ .Values.dbMaintain }}
{{- end }}
